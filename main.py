import telebot
import re
import xlsxwriter
import EmailSender
import json


from email.mime.multipart import MIMEMultipart              # –ú–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç
from telebot import types

KeyboardRemove = telebot.types.ReplyKeyboardRemove()
bot = telebot.TeleBot('5826445945:AAGwHbEk5eklQu7BIOwszG84EALhWrzmCJw')

user_status = 'unauthorized'
name = ''
surname = ''
email = ''
age = 0 
number = 0
int(number)
int(age)


addr_from = "koly.bessonov.2004@mail.ru"
addr_to = "Koskova@mail.ru"

msg = MIMEMultipart()
msg['From'] = addr_from
msg['To'] = addr_to
msg['Subject'] = "–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Exel"

body = "–ê –≤–æ—Ç —Ç–µ–±–µ –∏ Exel:)"

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –¶–û–ü–ü –ö—É–∑–±–∞—Å—Å–∞!\n\n" +
    "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è:\n\n" +
    "‚úÖ –í—ã—è–≤–ª–µ–Ω–∏–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–≥–∏–æ–Ω–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π;\n\n" +
    "‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –µ–¥–∏–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥—Ä–∞–∂–¥–∞–Ω;\n\n" +
    "‚úÖ –°–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–º –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤ –ø–æ–∏—Å–∫–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π; \n\n" +
    "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞;\n\n"+
    "‚úÖ –ó–∞—â–∏—Ç–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏;\n\n"+
    "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ —Ä–µ–≥–∏–æ–Ω–µ;\n\n"+
    "‚úÖ –í–æ–ø—Ä–æ—Å–∞–º–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞;\n\n"+
    "‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", parse_mode='html')
    get_menu(message)

def get_menu(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å üë®‚Äçüíª", callback_data='course'))
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üåç", callback_data='contacts'))

    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", parse_mode='html', reply_markup=keyboard )

@bot.message_handler(commands=['course']) #–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
def list_courses(message):
    if user_status == 'authorized':
        #bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:  ", parse_mode='html')
        count = 10
        page = 1
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='unseen'))
        markup.add(types.InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                   types.InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                              callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                  page + 1) + ",\"CountPage\":" + str(count) + "}"))

        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç!!!", reply_markup=markup)

    else:
        bot.send_message(message.from_user.id, "–°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\n " +
                                               "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", parse_mode='html')

@bot.message_handler(commands=['reg']) #–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def start_reg(message):
    if user_status == 'unauthorized':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", parse_mode='html', reply_markup=KeyboardRemove)
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", parse_mode='html', reply_markup=KeyboardRemove)


def get_name(message): #–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global name
    name = message.text

    if (len(name)) >= 2:
        if (len(name)) < 20:
            if any(char.isdigit() for char in name): #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã –≤ –∏–º–µ–Ω–∏
                bot.send_message(message.from_user.id, '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑', parse_mode='html')
                bot.register_next_step_handler(message, get_name)
            else:
                bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é', parse_mode='html')
                bot.register_next_step_handler(message, get_surname)
        else:
            bot.send_message(message.from_user.id, '–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑', parse_mode='html')
            bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(message.from_user.id, '–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑', parse_mode='html')
        bot.register_next_step_handler(message, get_name)

def get_surname(message): #–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global surname
    surname = message.text

    if (len(surname)) >= 2:
        if (len(surname)) < 60:
            if any(char.isdigit() for char in surname):
                bot.send_message(message.from_user.id,
                                 '–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑', parse_mode='html')
                bot.register_next_step_handler(message, get_surname)
            else:
                bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', parse_mode='html')
                bot.register_next_step_handler(message, get_number)
        else:
            bot.send_message(message.from_user.id, '–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑',
                             parse_mode='html')
            bot.register_next_step_handler(message, get_surname)
    else:
        bot.send_message(message.from_user.id, '–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑',
                         parse_mode='html')
        bot.register_next_step_handler(message, get_surname)

def get_number(message): #–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global number
    number = message.text
    pattern = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', number)

    if (bool(pattern)) == True:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã', parse_mode='html')
        bot.register_next_step_handler(message, get_email)
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫–Ω—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ', parse_mode='html')
        bot.register_next_step_handler(message, get_number)

def get_email(message): #–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª.–ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global email
    email = message.text
    email_validate_pattern = r"^\S+@\S+\.\S+$"

    if bool(re.match(email_validate_pattern, email)) == True:  # –ò—â–µ—Ç –ø–æ —à–∞–±–ª–æ–Ω—É (regex) –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (email)
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç?', parse_mode='html')
        bot.register_next_step_handler(message, get_age)
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', parse_mode='html')
        bot.register_next_step_handler(message, get_email)

def get_age(message): #–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text='–î–∞ ‚úÖ', callback_data='True'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç ‚ùå', callback_data='False'))
    
    global age
    age = message.text
    question = '–í–µ—Ä–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è?\n\n–í–∞—à–µ –∏–º—è: ' + name + '\n–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: ' + surname + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + "+ " + str(number) + '\n–ê–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã: ' + email + '\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ' + str(age)
    bot.send_message(message.from_user.id, question, parse_mode='html', reply_markup=keyboard)






@bot.callback_query_handler(func=lambda call: True)
def callback_reply(call):
    global user_status
    if call.data:
        if call.data == 'course':
            if user_status == 'unauthorized':
                bot.send_message(call.from_user.id, '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é \n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: <b>https://platform.copp42.ru/registration</b>\n\n –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ <b>Telegram</b> –Ω–∞–ø–∏—à–∏—Ç–µ <b>/reg</>',parse_mode='html')
            elif user_status == 'authorized':
                 list_courses(call)
        elif call.data == 'contacts':
            bot.send_message(call.from_user.id, '–ö–æ–Ω—Ç–∞–∫—Ç—ã: \n\n' +
                             "üìç 650021, –≥.–ö–µ–º–µ—Ä–æ–≤–æ, —É–ª.–ü–∞–≤–ª–µ–Ω–∫–æ, 1–∞\n\n" +
                             "üìû +7 (3842) 57-11-20 \nüìû +7 (3842) 57-11-14\n\n" +
                             "‚úâ  copp42@yandex.ru\n\n" +
                             "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n\n" +
                             "–ü–Ω-–ü—Ç 8:30-17:00\n–°–± 8:30-14:00\n–í—Å-–≤—ã—Ö–æ–¥–Ω–æ–π\n" +
                             "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: \n\n" +
                             "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ: \nhttps://vk.com/copp42kuzbass \n\n" +
                             "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: \nhttps://ok.ru/copp42kuzbass \n\n" +
                             "Telegram –∫–∞–Ω–∞–ª: \nhttps://t.me/copp42 \n\n" +
                             "Youtube –∫–∞–Ω–∞–ª: \n\nhttps://www.youtube.com/channel/UCn2HyuY_HBUy9L75sqx0qcw",
                             parse_mode='html', reply_markup=KeyboardRemove)

        elif call.data == 'True':

            bot.send_message(call.from_user.id, '–í—Å–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ üëè \n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—É—Ä—Å–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b> /course </b>', parse_mode='html')
            user_status = 'authorized'

            Collected_Data = (['–ò–º—è', name], ['–§–∞–º–∏–ª–∏—è', surname], ['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', number], ['–ê–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã', email], ['–í–æ–∑—Ä–∞—Å—Ç', age])
            workbook = xlsxwriter.Workbook('C:/Users/2/Desktop/Collected_info_user.xlsx')
            worksheet = workbook.add_worksheet("–õ–∏—Å—Ç 1")

            for i, (item, information) in enumerate(Collected_Data, start=1):
                worksheet.write(f'A{i}', item)
                worksheet.write(f'B{i}', information)
            workbook.close()

#            files = ["C:/Users/2/Desktop/Collected_info_user.xlsx"]

#           EmailSender.send_email(addr_to, "Test Exel", "–ê –≤–æ—Ç –∏ —Ç–µ–∫—Å—Ç:)", files)  # –ü–æ—á—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ ForEmail.py

        elif call.data == 'False':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            btn_return_to_start = types.KeyboardButton("/reg")
            markup.add(btn_return_to_start)
            bot.send_message(call.from_user.id, '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"/reg"</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥', parse_mode='html', reply_markup=markup)




    #–î–ª—è –ø–∞–≥–Ω–∏–Ω–∞—Ü–∏–∏

        req = call.data.split('_')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ - —Å–∫—Ä—ã—Ç—å
        if req[0] == 'unseen':
            bot.delete_message(call.message.chat.id, call.message.message_id)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ - –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
        elif 'pagination' in req[0]:
            # –†–∞—Å—Å–ø–∞—Ä—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π JSON
            json_string = json.loads(req[0])
            count = json_string['CountPage']
            page = json_string['NumberPage']
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º markup
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='unseen'))
            # markup –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page == 1:
                markup.add(types.InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                           types.InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                                callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                    page + 1) + ",\"CountPage\":" + str(count) + "}"))
            # markup –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            elif page == count:
                markup.add(types.InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥',
                                                callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                    page - 1) + ",\"CountPage\":" + str(count) + "}"),
                           types.InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '))
            # markup –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            else:
                markup.add(types.InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥',
                                                callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                    page - 1) + ",\"CountPage\":" + str(count) + "}"),
                           types.InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                           types.InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                                callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                    page + 1) + ",\"CountPage\":" + str(count) + "}"))
#           bot.edit_message_text(f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {count}', reply_markup=markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.edit_message_text("–ù–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n" +
                                  " ", reply_markup=markup, chat_id=call.message.chat.id, message_id=call.message.message_id)

"""""
def get_menu(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å üë®‚Äçüíª", callback_data='course'))
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üåç", callback_data='contacts'))

    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", parse_mode='html', reply_markup=keyboard )

@bot.callback_query_handler(func=lambda call: True)
def callback_reply(call):
    if call.data:
        if call.data == 'course':
            bot.send_message(call.from_user.id, '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é \n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: <b>https://platform.copp42.ru/registration</b>\n\n –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ <b>Telegram</b> –Ω–∞–ø–∏—à–∏—Ç–µ <b>/reg</>', parse_mode='html')
        elif call.data == 'contacts':
            bot.send_message(call.from_user.id, '–ö–æ–Ω—Ç–∞–∫—Ç—ã)', parse_mode='html')
"""""
bot.polling(none_stop=True)